# setwd('../data/')
setwd('../data/')
# Ids of patients which are overlap between two phases of MSKCC
mskcc_supp=data.frame(read_excel('../data/mskcc_sup.xlsx', sheet = 1))
mskcc_supp$Drug_class[mskcc_supp$Drug_class == "PD-1/PDL-1"] = "PD-1/PD-L1"
mskcc_sup_pd1=mskcc_supp[grep('PD',mskcc_supp$Drug_class),]
mskcc_sup_pd1$Cancer.Type[mskcc_sup_pd1$Cancer.Type =="Bladder Cancer"] = "Bladder"
mskcc_sup_pd1$Cancer.Type[mskcc_sup_pd1$Cancer.Type =="Breast Cancer"] = "Breast"
mskcc_sup_pd1$Cancer.Type[mskcc_sup_pd1$Cancer.Type =="Cancer of Unknown Primary"] = "Unknown primary"
mskcc_sup_pd1$Cancer.Type[mskcc_sup_pd1$Cancer.Type =="Colorectal Cancer"] = "Colorectal"
mskcc_sup_pd1$Cancer.Type[mskcc_sup_pd1$Cancer.Type =="Esophagogastric Cancer"] = "Esophageal"
mskcc_sup_pd1$Cancer.Type[mskcc_sup_pd1$Cancer.Type =="Head and Neck Cancer"] = "Head & Neck"
mskcc_sup_pd1$Cancer.Type[mskcc_sup_pd1$Cancer.Type =="Non-Small Cell Lung Cancer"] = "NSCLC"
mskcc_sup_pd1$Cancer.Type[mskcc_sup_pd1$Cancer.Type =="Renal Cell Carcinoma"] = "Renal"
# table(mskcc_sup_pd1$Cancer.Type)
overlap_id= data.frame(read_excel('../data/TMB_and_outcomes_in_patients_treated_with_ICI_valero.xlsx', sheet = 2))
# Removing overlap of samstein et al
ROI=intersect(mskcc_sup_pd1$Sample.ID, overlap_id$IDs.overlapping.with.Samstein.dataset)
mskcc_sup_no_overlap =mskcc_sup_pd1[!(mskcc_sup_pd1$Sample.ID %in% ROI),]
## Loading mskcc_2's et al data
Valero_ICI = data.frame(read_excel("../data/TMB_and_outcomes_in_patients_treated_with_ICI_valero.xlsx", sheet = 1))
# Valero_ICI$Vital.status[Valero_ICI$Vital.status== "Alive"] = 0
# Valero_ICI$Vital.status[Valero_ICI$Vital.status== "Dead"] = 1
Valero_ICI$Vital.status[grep("Alive", Valero_ICI$Vital.status,ignore.case = T)] = 0
Valero_ICI$Vital.status[grep("Dead", Valero_ICI$Vital.status,ignore.case = T)] = 1
Valero_ICI$Vital.status = as.numeric(Valero_ICI$Vital.status)
colnames(Valero_ICI)[colnames(Valero_ICI) %in% c("TMB..Mutations.Mb.",
"Vital.status",
"Overall.Survival..Months.")] <- c("TMB",
"Overall_survival_status",
"Overall_survival_months")
Valero_ICI= Valero_ICI[!is.na(Valero_ICI$Overall_survival_status),] ### removing Na values of survival status
Valero_ICI_pd1= Valero_ICI[grep('PD',Valero_ICI$ICI.drug.class),]
Valero_ICI_pd1$Progression= as.numeric(as.character(factor(Valero_ICI_pd1$Progression, labels =  c('0', '1'))))
Valero_ICI_pd1$Cancer.type[Valero_ICI_pd1$Cancer.type=="CNS"] = "Glioma"
## for forest plot to check take the sample size
samples_each_cancer_type=aggregate(ID ~ Cancer.type, Valero_ICI_pd1, length)
samples_each_cancer_type$cancer_acronym= c('BLCA', 'BRCA','COAD', 'UCEC', 'ESCA', 'STAD',
'GBM', 'HNSC', 'LIHC', 'SKCM', 'MESO','NSCLC',
'OV', 'PAAD', 'KIRC', 'SARC', 'SCLC', 'Unknown-Primary')
cancer_Types_of_Interest=samples_each_cancer_type[,3][samples_each_cancer_type[,2]>1]
# Combine the above two datasets
mskcc_combined= rbind(data.frame(ID= mskcc_sup_no_overlap$Sample.ID,
Age= mskcc_sup_no_overlap$Age_decade,
Cancer_Type= mskcc_sup_no_overlap$Cancer.Type,
Sex= mskcc_sup_no_overlap$GENDER,
TMB= mskcc_sup_no_overlap$TMB,
drug= mskcc_sup_no_overlap$Drug_class,
year_in_ici= mskcc_sup_no_overlap$Imm_yearbin,
Overall_survival_status= mskcc_sup_no_overlap$SURVIVAL_EVENT,
Overall_survival_months= mskcc_sup_no_overlap$SURVIVAL_MONTHS,
PFS_status= NA,
PFS_months= NA,
ORR= NA),
data.frame(ID= Valero_ICI_pd1$ID,
Age= Valero_ICI_pd1$Age.at.ICI.start,
Cancer_Type= Valero_ICI_pd1$Cancer.type,
Sex= Valero_ICI_pd1$Sex,
TMB= Valero_ICI_pd1$TMB,
drug= Valero_ICI_pd1$ICI.drug.class,
year_in_ici= Valero_ICI_pd1$Year.of.ICI.treatment.start,
Overall_survival_status= Valero_ICI_pd1$Overall_survival_status,
Overall_survival_months= Valero_ICI_pd1$Overall_survival_months,
PFS_status= factor2numeric(factor(Valero_ICI_pd1$Progression, labels =  c('0', '1'))),
PFS_months= Valero_ICI_pd1$Progression.Free.Survival..Months.,
ORR= Valero_ICI_pd1$Response.to.ICI)
)
mskcc_combined$Cancer_Type_acronym=NA
mskcc_combined$Cancer_Type=factor(mskcc_combined$Cancer_Type)
mskcc_combined$Cancer_Type_acronym=mskcc_combined$Cancer_Type
levels(mskcc_combined$Cancer_Type_acronym)=c('BLCA', 'BRCA','COAD', 'UCEC', 'ESCA', 'STAD',
'GBM', 'HNSC', 'LIHC', 'SKCM', 'MESO','NSCLC',
'OV', 'PAAD', 'KIRC', 'SARC', 'SCLC', 'Unknown-Primary')
samples_by_cancer_type = aggregate(ID ~ Cancer_Type_acronym,mskcc_combined, length)
cancerTypes_of_Interest = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
table(mskcc_combined$Cancer_Type)
# Calculates TMB and Response assocaition
Calculate_TMB_Response_association<-function(infunc_df= mskcc_combined,
COI="NSCLC",
response_measure='ORR'){
infunc_df_tmb= infunc_df[((infunc_df$Cancer_Type_acronym == COI)),]
#infunc_df_tmb= infunc_df[((infunc_df$Cancer_Type == COI)),]
if(response_measure=='ORR'){
infunc_df_tmb=infunc_df_tmb[!is.na(infunc_df_tmb$ORR),]
# Contigency matrix
cont_matrix=table( infunc_df_tmb$TMB>=10, infunc_df_tmb$ORR)
# Perform fisher test
fisher_test_results_raw=fisher.test(cont_matrix)
to_return=c(effect_size=unlist(fisher_test_results_raw$estimate),
P=fisher_test_results_raw$p.value)
} else if(response_measure =='OS') {
infunc_df_tmb= infunc_df_tmb[!is.na(infunc_df_tmb$Overall_survival_months),]
# Perform coxph test
coxph_model <- coxph(Surv(time = Overall_survival_months,
event = Overall_survival_status) ~ (TMB >= 10) ,
data = infunc_df_tmb)
to_return=c(effect_size=summary(coxph_model)$coefficients[1,c(2)],
P=summary(coxph_model)$coefficients[1,c(5)])
}  else if(response_measure=='PFS') {
infunc_df_tmb= infunc_df_tmb[!is.na(infunc_df_tmb$PFS_months),]
coxph_model <- coxph(Surv(time = PFS_months,
event = PFS_status) ~ (TMB>=10) ,
data = infunc_df_tmb)
to_return=c(effect_size=summary(coxph_model)$coefficients[1,c(2)],
P=summary(coxph_model)$coefficients[1,c(5)])
}
names(to_return)=c('effect_size', 'P')
to_return
}
knitr::opts_chunk$set(engine.opts = list(bash = "-l"))
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(engine.opts = list(bash = "-l"))
knitr::opts_chunk$set(echo = FALSE)
source_rmd <- function(x, ...) {
library(knitr)
options(knitr.duplicate.label = 'allow')
source(purl(x, output = tempfile()), ...)
}
source_rmd("../Tools/s0_Build_Immune_matrix.Rmd")
source_rmd("../Tools/s1_Load_Preprocess_MSKCC.Rmd")
source_rmd("../Tools/Figure2_and_sup_figure_2.Rmd")
source_rmd <- function(x, ...) {
library(knitr)
options(knitr.duplicate.label = 'allow')
source(purl(x, output = tempfile()), ...)
}
source_rmd("../Tools/s0_Build_Immune_matrix.Rmd")
source_rmd("../Tools/s1_Load_Preprocess_MSKCC.Rmd")
source_rmd("../Tools/Figure2_and_sup_figure_2.Rmd")
source_rmd <- function(x, ...) {
library(knitr)
options(knitr.duplicate.label = 'allow')
source(purl(x, output = tempfile()), ...)
}
source_rmd("../Tools/s0_Build_Immune_matrix.Rmd")
source_rmd("../Tools/s1_Load_Preprocess_MSKCC.Rmd")
source_rmd("../Tools/Figure2_and_sup_figure_2.Rmd")
### DF: Power of TMB with variable, measure by OS
POT_with_variable_by_OS= na.omit(data.frame(OS_difference[allcancer_types,],
immune_factor[allcancer_types,c(21,38,23,36)]))
colnames(POT_with_variable_by_OS)[c(3:6)]= c("M1_macrophage","Tumor_purity",'Resting_DC',"PDL1_CPS")
POT_with_variable_by_OS = POT_with_variable_by_OS[is.finite(POT_with_variable_by_OS$effect_size),]
POT_with_variable_by_OS= POT_with_variable_by_OS[!(rownames(POT_with_variable_by_OS) %in% c('KIRC')),]
POT_with_variable_by_OS$new_M1_macrophage= na.omit(immune_cells_by_cancerType[rownames(POT_with_variable_by_OS),
'Macrophages.M1'])
POT_with_variable_by_OS$new_Resting_DC= na.omit(immune_cells_by_cancerType[rownames(POT_with_variable_by_OS),
'Dendritic.Cells.Resting'])
### DF: Power of TMB with variable, measure by PFS
POT_with_variable_by_PFS= na.omit(data.frame(PFS_difference[allcancer_types,],
immune_factor[allcancer_types,c(21,38,23,36)]))
colnames(POT_with_variable_by_PFS)[c(3:6)]= c("M1_macrophage","Tumor_purity",'Resting_DC',"PDL1_CPS")
POT_with_variable_by_PFS = POT_with_variable_by_PFS[is.finite(POT_with_variable_by_PFS$effect_size),]
POT_with_variable_by_PFS= POT_with_variable_by_PFS[!(rownames(POT_with_variable_by_PFS) %in% c('KIRC')),]
POT_with_variable_by_PFS$new_M1_macrophage=na.omit(immune_cells_by_cancerType[rownames(POT_with_variable_by_PFS)                                                                               ,'Macrophages.M1'])
POT_with_variable_by_PFS$new_Resting_DC= na.omit(immune_cells_by_cancerType[rownames(POT_with_variable_by_PFS),
'Dendritic.Cells.Resting'])
### DF: Power of TMB with variable, measure by ORR
POT_with_variable_by_ORR= na.omit(data.frame(ORR_difference[allcancer_types,],
immune_factor[allcancer_types,c(21,38,23,36)]))
colnames(POT_with_variable_by_ORR)[c(3:6)]= c("M1_macrophage","Tumor_purity",'Resting_DC',"PDL1_CPS")
POT_with_variable_by_ORR = POT_with_variable_by_ORR[is.finite(POT_with_variable_by_ORR$effect_size),]
POT_with_variable_by_ORR= POT_with_variable_by_ORR[!(rownames(POT_with_variable_by_ORR) %in%    c("OV",'COAD')),]
POT_with_variable_by_ORR$new_M1_macrophage=na.omit(immune_cells_by_cancerType[rownames(POT_with_variable_by_ORR)
,'Macrophages.M1'])
POT_with_variable_by_ORR$new_Resting_DC= na.omit(immune_cells_by_cancerType[rownames(POT_with_variable_by_ORR),
'Dendritic.Cells.Resting'])
###### new df with TCGA immune abundance
all_cancer_types_trained= allcancer_types[!(allcancer_types %in% c('MESO','STAD','SCLC'))]
test_df_joo= immune_factor[c('ACC','CESC','MESO','UVM', 'PRAD'),c(21,38,23,36)]
colnames(test_df_joo)= c("M1_macrophage","Tumor_purity",'Resting_DC',"PDL1_CPS")
test_df_2= na.omit(immune_cells_by_cancerType[!(rownames(immune_cells_by_cancerType) %in% all_cancer_types_trained),c('Macrophages.M1', "Dendritic.Cells.Resting")])
test_df_2= test_df_2[!(rownames(test_df_2) %in% c('LUAD','LUSC')),]
colnames(test_df_2)=c("M1_macrophage",'Resting_DC')
range(POT_with_variable_by_OS$M1_macrophage)
range(POT_with_variable_by_OS$new_M1_macrophage)
range(POT_with_variable_by_OS$Resting_DC)
range(POT_with_variable_by_OS$new_Resting_DC)
ggplot(data=POT_with_variable_by_OS, aes(x=M1_macrophage, y=new_M1_macrophage))+
geom_point()+
stat_smooth(method='lm')+
theme_bw(base_size = 15)+
labs(x='OLD immune-factor', y='New immune factor')+
stat_cor(label.y =c(0,0), label.x = c(0,0) , method = 'p', cor.coef.name = 'rho', size=5)
ggplot(data=POT_with_variable_by_OS, aes(x=Resting_DC, y=new_Resting_DC))+
geom_point()+
stat_smooth(method='lm')+
theme_bw(base_size = 15)+
labs(x='OLD immune-factor', y='New immune factor')+
stat_cor(label.y =c(0,0), label.x = c(0,0) , method = 'p', cor.coef.name = 'rho', size=5)
modulator_matrix = as.matrix(POT_with_variable_by_OS[3:6],)
# jpeg('/Result_fgures/correlation_matrix_features.jpeg',height=450, width = 450, units = 'px',quality = 300)
#
correlation_matrix= corrplot.mixed(cor(modulator_matrix), tl.col="black",tl.cex= 1, lower.col='black',number.cex= 1)
# dev.off()
# Train the model
train.control <- trainControl(method = "LOOCV")
model_OS <- train(effect_size ~ M1_macrophage + Resting_DC,
data = POT_with_variable_by_OS,
method = "lm",
trControl = train.control)
performance_result_OS= cor.test(model_OS$pred$pred,model_OS$pred$obs, method = 's')[4]
dfplot_os= model_OS$pred
model_PFS <- train(effect_size ~ M1_macrophage + Resting_DC,
data = POT_with_variable_by_PFS,
method = "lm",
trControl = train.control)
performance_result_PFS= cor.test(model_PFS$pred$pred,model_PFS$pred$obs, method = 's')[4]
model_ORR <- train(effect_size ~ M1_macrophage + Resting_DC,
data = POT_with_variable_by_ORR,
method = "lm",
trControl = train.control)
performance_result_ORR= cor.test(model_ORR$pred$pred,model_ORR$pred$obs, method = 's')[4]
sum(performance_result_OS$estimate, performance_result_PFS$estimate, performance_result_ORR$estimate)/3
# testing_features in range
test_df_2_interpolation = test_df_2[((test_df_2$M1_macrophage > 0.019 & test_df_2$M1_macrophage < 0.085) & (test_df_2$Resting_DC < 0.03)),]
# testing_features in range
test_df_2_interpolation = test_df_2[((test_df_2$M1_macrophage > 0.019 & test_df_2$M1_macrophage < 0.085) & (test_df_2$Resting_DC < 0.03)),]
test_df_2_extrapolation = test_df_2[!(rownames(test_df_2) %in% rownames(test_df_2_interpolation)),]
predicted_values= data.frame(predicted_OS_Power_of_TMB= sort(predict(model_OS, test_df_2_interpolation), decreasing = T))
####### supplementary Table 5#############
# write.csv(predicted_values, file = '../data/Model_prediction_OS.csv')
predicted_values
dfplot= model_OS$pred[1:2]
dfplot$cancertype = rownames(model_OS$pred)
dfplot$responsetype = "progression free Survival"
panel_3_A= ggplot(dfplot, aes(x=pred, y= obs))+
geom_point()+
stat_smooth(method='lm')+
theme_bw(base_size = 15)+
labs(x='Predicted TMB Power\n(CD4_helper_T_cells + neutrophils)',
y='TMB Power')+
stat_cor(label.y.npc = 'top', label.x.npc = 'left', method = 's', cor.coef.name = 'rho', size=5)+
geom_label_repel(aes(label=cancertype))
#
ggsave('../Result_fgures/model_pred_obs_POT_OS_spearman.pdf',
panel_3_A, height=5, width = 6, units = 'in', dpi = 500)
panel_3_A
PFS_difference['NSCLC','effect_size']
ggplot(predicted_values, aes(x = reorder(rownames(predicted_values), predicted_OS_Power_of_TMB), y = predicted_OS_Power_of_TMB)) +
geom_point(stat = "identity", color = "dark blue", size = 6) +
# geom_hline(yintercept = 1.4, color = "royal blue 1", size = 0.5, linetype= 'dotted')+
geom_hline(yintercept = round(ORR_difference['NSCLC','effect_size'],2),
color = "royal blue 1", size = 0.5, linetype= 'dotted')+
geom_segment(aes(y = 0,
x =reorder(rownames(predicted_values), predicted_OS_Power_of_TMB),
yend = predicted_OS_Power_of_TMB,
xend =reorder(rownames(predicted_values), predicted_OS_Power_of_TMB) ),
color = "black") + #this function creates the lines leading to points
theme_bw(base_size = 13)+
xlab("Cancer Types")+
ylab("Predicted TMB Power (Using OS)")
ggplot(predicted_values, aes(x = reorder(rownames(predicted_values), predicted_OS_Power_of_TMB), y = predicted_OS_Power_of_TMB)) +
geom_point(stat = "identity", color = "dark blue", size = 6) +
# geom_hline(yintercept = 1.4, color = "royal blue 1", size = 0.5, linetype= 'dotted')+
geom_hline(yintercept = round(OS_difference['NSCLC','effect_size'],2),
color = "royal blue 1", size = 0.5, linetype= 'dotted')+
geom_segment(aes(y = 0,
x =reorder(rownames(predicted_values), predicted_OS_Power_of_TMB),
yend = predicted_OS_Power_of_TMB,
xend =reorder(rownames(predicted_values), predicted_OS_Power_of_TMB) ),
color = "black") + #this function creates the lines leading to points
theme_bw(base_size = 13)+
xlab("Cancer Types")+
ylab("Predicted TMB Power (Using OS)")
source_rmd <- function(x, ...) {
library(knitr)
options(knitr.duplicate.label = 'allow')
source(purl(x, output = tempfile()), ...)
}
source_rmd("../Tools/s0_Build_Immune_matrix.Rmd")
source_rmd <- function(x, ...) {
library(knitr)
options(knitr.duplicate.label = 'allow')
source(purl(x, output = tempfile()), ...)
}
source_rmd("../Tools/s0_Build_Immune_matrix.Rmd")
source_rmd("../Tools/s1_Load_Preprocess_MSKCC.Rmd")
# install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_0.4.10.tar.gz", repos = NULL, type="source")
# remove.packages('xfun')
# install.packages('xfun')
# packageVersion('xfun')
require(ggrepel)
library(forestplot)
library(corrplot)
require("survival")
require(statar)
library(ggplot2)
library(ggpubr)
library(readxl)
library(tidyr)
require("survival")
require("survminer")
library(caret)
# setwd('../data/')
mskcc_combined= read.csv("../data/mskcc_combined_updated.csv")
mskcc_combined= read.csv("../data/mskcc_combined_updated.csv")
# ########################################
### Analysis: reviewer 2: R3 - Repeat Analysis excluding PAAD #################
# mskcc_combined= mskcc_combined[!mskcc_combined$Cancer_Type_acronym == "PAAD",]
# ########################################
mskcc_combined$Cancer_Type_acronym=factor(mskcc_combined$Cancer_Type_acronym)
samples_by_cancer_type = aggregate(ID ~ Cancer_Type_acronym,mskcc_combined, length)
cancerTypes_of_Interest = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
## removing cancer types where PFS/ ORR is NA for figure 1B and ex figure 1
mskcc_df_ORR_PFS= mskcc_combined[!(is.na(mskcc_combined$PFS_status)),]
samples_each_cancer_type = aggregate(ID ~ Cancer_Type_acronym,mskcc_df_ORR_PFS, length)
cancerTypes_each_Interest = samples_each_cancer_type[,1][samples_each_cancer_type[,2]> 1]
# ########################################
### Analysis: reviewer 2: R3 - Repeat Analysis excluding PAAD #################
# mskcc_combined= mskcc_combined[!mskcc_combined$Cancer_Type_acronym == "PAAD",]
# ########################################
table(mskcc_combined$Sex)
# ########################################
### Analysis: reviewer 2: R3 - Repeat Analysis excluding PAAD #################
# mskcc_combined= mskcc_combined[!mskcc_combined$Cancer_Type_acronym == "PAAD",]
# ########################################
table(mskcc_combined$stage)
mskcc_combined= read.csv("../data/mskcc_combined.csv")
mskcc_combined= read.csv("../data/mskcc_combined.csv")
mskcc_combined= read.csv("../data/mskcc_combined.csv")
# ########################################
### Analysis: reviewer 2: R3 - Repeat Analysis excluding PAAD #################
# mskcc_combined= mskcc_combined[!mskcc_combined$Cancer_Type_acronym == "PAAD",]
# ########################################
table(mskcc_combined$stage)
# ########################################
### Analysis: reviewer 2: R3 - Repeat Analysis excluding PAAD #################
# mskcc_combined= mskcc_combined[!mskcc_combined$Cancer_Type_acronym == "PAAD",]
# ########################################
table(mskcc_combined$stage)
mskcc_combined
# ########################################
### Analysis: reviewer 2: R3 - Repeat Analysis excluding PAAD #################
# mskcc_combined= mskcc_combined[!mskcc_combined$Cancer_Type_acronym == "PAAD",]
# ########################################
table(mskcc_combined$Sex)
```{r}
mskcc_combined= read.csv("../data/mskcc_combined_updated.csv")
# ########################################
### Analysis: reviewer 2: R3 - Repeat Analysis excluding PAAD #################
# mskcc_combined= mskcc_combined[!mskcc_combined$Cancer_Type_acronym == "PAAD",]
# ########################################
table(mskcc_combined$Sex)
source_rmd <- function(x, ...) {
library(knitr)
options(knitr.duplicate.label = 'allow')
source(purl(x, output = tempfile()), ...)
}
source_rmd("../Tools/s0_Build_Immune_matrix.Rmd")
source_rmd("../Tools/s1_Load_Preprocess_MSKCC.Rmd")
source_rmd("../Tools/Figure2_and_sup_figure_2.Rmd")
library(knitr)
source_rmd <-function(x, ...) {
options(knitr.duplicate.label = 'allow')
source(purl(x, output = tempfile()), ...)
}
source_rmd("../Tools/s0_Build_Immune_matrix.Rmd")
source_rmd("../Tools/s1_Load_Preprocess_MSKCC.Rmd")
#################
#custom function
# Strip all non-char and non-numeric and make lower case
# this is primarily to facilitate inconsistent naming comparison (eg. drugNames)
stripall2match<-function(x){
tolower(gsub('[^A-z0-9]','',x) )
}
#################
allcancer_types=levels(mskcc_combined$Cancer_Type_acronym)
ORR_difference=do.call(rbind, lapply(allcancer_types, function(x)
err_handle(Calculate_TMB_Response_association(infunc_df= mskcc_combined,
COI=x,
response_measure='ORR'
# ,th= 20 #ratio_TMB_H_vs_L*100
)) ))
ORR_difference <- data.frame(ORR_difference)
rownames(ORR_difference)=allcancer_types
OS_difference=do.call(rbind, lapply(allcancer_types, function(x)
err_handle(Calculate_TMB_Response_association(infunc_df= mskcc_combined,
COI=x,
response_measure='OS'
# ,th= 20 #ratio_TMB_H_vs_L*100
))) )
## 1/HR to keep same direction for TMB power
OS_difference <- data.frame(OS_difference)
OS_difference$effect_size= 1/OS_difference$effect_size
rownames(OS_difference)=allcancer_types
PFS_difference=do.call(rbind, lapply(allcancer_types, function(x)
err_handle(Calculate_TMB_Response_association(infunc_df= mskcc_combined,
COI=x,
response_measure='PFS'
# ,th= 20 #ratio_TMB_H_vs_L*100
))) )
PFS_difference <- data.frame(PFS_difference)
PFS_difference$effect_size= 1/PFS_difference$effect_size
rownames(PFS_difference)=allcancer_types
OS_difference
Fig_ORR_allcancer_types=create_corr_with_Immune_factors(infunc_cancer_types=allcancer_types,
infunc_immune_matrix= immune_factor, #### set immune_factor for original analyis
infun_Tmb_Resp_Association = ORR_difference,
response_type='ORR',
consider_cancer_type='all_cancerTypes',
infunc_title = 'All Cancer Types')
Fig_ORR_Only_Sig_Tmb.Resp_associated_cancerTypes=create_corr_with_Immune_factors(
infunc_cancer_types=allcancer_types[which(ORR_difference[,2]/2<0.1)],
infunc_immune_matrix= immune_factor,
infun_Tmb_Resp_Association = ORR_difference,
response_type='ORR',
consider_cancer_type='Only_Sig_Tmb.Resp_associated_cancerTypes',
infunc_title = 'Cancer types with Sig Power of TMB')
combined_ORR=ggarrange(Fig_ORR_allcancer_types[[2]],
Fig_ORR_Only_Sig_Tmb.Resp_associated_cancerTypes[[2]],
common.legend = T)
ggsave(paste('../Result_fgures/Fig1A_tmb-ORR_associationVSTME_factors','.pdf', sep ='' ),
combined_ORR, height=7, width = 12, units = 'in', dpi = 500)
Fig_OS_allcancer_types=create_corr_with_Immune_factors(infunc_cancer_types=allcancer_types,
infunc_immune_matrix= immune_factor,
infun_Tmb_Resp_Association = OS_difference,
response_type='OS',
consider_cancer_type='all_cancerTypes',
infunc_title = 'All Cancer Types')
Fig_OS_Only_Sig_Tmb.Resp_associated_cancerTypes=create_corr_with_Immune_factors(
infunc_cancer_types=allcancer_types[which(OS_difference[,2]/2<0.1)],
infunc_immune_matrix= immune_factor,
infun_Tmb_Resp_Association = OS_difference,
response_type='OS',
consider_cancer_type='Only_Sig_Tmb.Resp_associated_cancerTypes',
infunc_title = 'Cancer types with Sig tmb-resp Association')
combined_OS=ggarrange(Fig_OS_allcancer_types[[2]],
Fig_OS_Only_Sig_Tmb.Resp_associated_cancerTypes[[2]],
common.legend = T)
ggsave(paste('../Result_fgures/Fig1B_tmb-OS_associationVSTME_factors','.pdf', sep ='' ),
combined_OS, height=7, width = 12, units = 'in', dpi = 500)
Fig_PFS_allcancer_types=create_corr_with_Immune_factors(infunc_cancer_types=allcancer_types,
infunc_immune_matrix= immune_factor,
infun_Tmb_Resp_Association = PFS_difference,
response_type='PFS',
consider_cancer_type='all_cancerTypes',
infunc_title = 'All Cancer Types')
Fig_PFS_Only_Sig_Tmb.Resp_associated_cancerTypes=create_corr_with_Immune_factors(
infunc_cancer_types=allcancer_types[which(PFS_difference[,2]/2<0.1)],
infunc_immune_matrix= immune_factor,
infun_Tmb_Resp_Association = PFS_difference,
response_type='PFS',
consider_cancer_type='Only_Sig_Tmb.Resp_associated_cancerTypes',
infunc_title = 'Cancer types with Sig tmb-resp Association')
combined_PFS=ggarrange(Fig_PFS_allcancer_types[[2]],
Fig_PFS_Only_Sig_Tmb.Resp_associated_cancerTypes[[2]],
common.legend = T)
ggsave(paste('../Result_fgures//Fig1C_tmb-PFS_associationVSTME_factors', '.pdf', sep ='' ),
combined_PFS, height=7, width = 12, units = 'in', dpi = 500)
colnames(immune_factor)
df2plot=data.frame(allcancer_types,OS_difference[allcancer_types,],
immune_factor[allcancer_types,c(21,38,23,36)])
df2plot= na.omit(df2plot)
df2plot= df2plot[is.finite(df2plot$effect_size),]
df2plot$rank= rank(df2plot$effect_size)
df2plot_long= gather(df2plot, modulator_name, abundance,
M1.macrophage:PDL1..combined.positive.score.,factor_key = T )
df2plot_long$modulator_name= ifelse(df2plot_long$modulator_name == "M1.macrophage",
"M1 macrophage",
ifelse(df2plot_long$modulator_name == "Tumor.purity",
"Tumor purity",
ifelse(df2plot_long$modulator_name == "Resting.dendritic.cells"
,"Resting dendritic cells",
ifelse(df2plot_long$modulator_name == "Active.dendritic.cells",
"Active dendritic cells", "PDL1 combined positive score"))))
df2plot_long$Modulator_type = ifelse(df2plot_long$modulator_name %in%
c("M1 macrophage","Tumor purity"),
"Positive modulator",
"Negative modulator")
# unlist(lapply(split(df2plot_long, df2plot_long$modulator_name), function(x) rank(x[,6])))
df2plot_long= df2plot_long[order(df2plot_long$modulator_name),]
df2plot_long$modulator_rank= unlist(lapply(split(df2plot_long, df2plot_long$modulator_name), function(x) rank(x[,6])))
df2plot_pearson= df2plot_long[!(df2plot_long$allcancer_types %in% c('KIRC')),]
Panel2_D <- ggplot(df2plot_pearson, aes(x=effect_size, y= abundance, size= -log(P, 10))) +
stat_smooth(method='lm')+
facet_wrap(~ Modulator_type+modulator_name, scales = 'free')+
geom_point()+
theme_bw(base_size = 15)+
# theme(legend.position = 'none')+
labs(x='TMB Power',
y=paste('Abundance'), size='-log10(P)')+
stat_cor( method = 's', cor.coef.name = 'rho', size=5, label.x.npc = 'center', label.y.npc = 'center')+
geom_label_repel(aes(label=(allcancer_types), size=0.8))+
coord_flip()
ggsave('../Result_fgures/OS_Power_of_TMB_in_5_abu_modulators_spear.pdf',
Panel2_D, height=10, width = 9, units = 'in', dpi = 500)
features=rownames(Fig_PFS_Only_Sig_Tmb.Resp_associated_cancerTypes[[1]])
df_all_cor=data.frame(features=rownames(Fig_PFS_Only_Sig_Tmb.Resp_associated_cancerTypes[[1]]),
pfs_Sig=Fig_PFS_Only_Sig_Tmb.Resp_associated_cancerTypes[[1]][features,]$estimate.rho,
pfs_all=Fig_PFS_allcancer_types[[1]][features,]$estimate.rho,
os_sig=Fig_OS_Only_Sig_Tmb.Resp_associated_cancerTypes[[1]][features,]$estimate.rho,
os_all=Fig_OS_allcancer_types[[1]][features,]$estimate.rho,
orr_sig= Fig_ORR_Only_Sig_Tmb.Resp_associated_cancerTypes[[1]][features,]$estimate.rho,
orr_all = Fig_ORR_allcancer_types[[1]][features,]$estimate.rho)
df_all_cor$mean_row= rowMeans(abs(df_all_cor[,-1]),2)
df_all_cor[,1]=gsub('\\.',' ',gsub('\\.\\.',' ',df_all_cor[,1]))
features_ranked = data.frame(ranked_immune_factors = df_all_cor[order(rowMeans(apply(abs(df_all_cor[,c(-1,-8)]), 2, rank)), decreasing = T),1])
# # ### Save the file for the future reference
# write.csv(df_all_cor, '../data/immune_modulator_selection_revised_mean.csv')
# write.csv(features_ranked, '../data/immune_modulator_rank_revised.csv')
################################
#immune factors ranks from original analysis
################################
old_ranked_features= read.csv('../data/immune_modulator_rank_original.csv')
source_rmd <- function(x, ...) {
library(knitr)
options(knitr.duplicate.label = 'allow')
source(purl(x, output = tempfile()), ...)
}
source_rmd("../Tools/s0_Build_Immune_matrix.Rmd")
source_rmd("../Tools/s1_Load_Preprocess_MSKCC.Rmd")
source_rmd("../Tools/Figure2_and_sup_figure_2.Rmd")
