ORR= Valero_ICI_pd1$Response.to.ICI)
)
mskcc_combined$Cancer_Type_acronym=NA
mskcc_combined$Cancer_Type=factor(mskcc_combined$Cancer_Type)
mskcc_combined$Cancer_Type_acronym=mskcc_combined$Cancer_Type
levels(mskcc_combined$Cancer_Type_acronym)=c('BLCA', 'BRCA','COAD', 'UCEC', 'ESCA', 'STAD',
'GBM', 'HNSC', 'LIHC', 'SKCM', 'MESO','NSCLC',
'OV', 'PAAD', 'KIRC', 'SARC', 'SCLC', 'Unknown-Primary')
samples_by_cancer_type = aggregate(ID ~ Cancer_Type_acronym,mskcc_combined, length)
cancerTypes_of_Interest = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
table(mskcc_combined$Cancer_Type)
require(ggrepel)
library(corrplot)
require("survival")
require(statar)
library(ggplot2)
library(ggpubr)
library(readxl)
library(tidyr)
require("survival")
require("survminer")
library(caret)
source('/Users/neelamf2/Downloads/Eytan/myCustom_functions.R')
setwd('/Users/neelamf2/Downloads/Eytan/fda-tmbCriteria-Power-vs-age-sex/Data/')
setwd('/Users/neelamf2/Downloads/Eytan/fda-tmbCriteria-Power-vs-age-sex/Data/')
# Ids of patients which are overlap between two phases of MSKCC
mskcc_supp=data.frame(read_excel('mskcc_sup.xlsx', sheet = 1))
mskcc_supp$Drug_class[mskcc_supp$Drug_class == "PD-1/PDL-1"] = "PD-1/PD-L1"
mskcc_sup_pd1=mskcc_supp[grep('PD',mskcc_supp$Drug_class),]
mskcc_sup_pd1$Cancer.Type[mskcc_sup_pd1$Cancer.Type =="Bladder Cancer"] = "Bladder"
mskcc_sup_pd1$Cancer.Type[mskcc_sup_pd1$Cancer.Type =="Breast Cancer"] = "Breast"
mskcc_sup_pd1$Cancer.Type[mskcc_sup_pd1$Cancer.Type =="Cancer of Unknown Primary"] = "Unknown primary"
mskcc_sup_pd1$Cancer.Type[mskcc_sup_pd1$Cancer.Type =="Colorectal Cancer"] = "Colorectal"
mskcc_sup_pd1$Cancer.Type[mskcc_sup_pd1$Cancer.Type =="Esophagogastric Cancer"] = "Esophageal"
mskcc_sup_pd1$Cancer.Type[mskcc_sup_pd1$Cancer.Type =="Head and Neck Cancer"] = "Head & Neck"
mskcc_sup_pd1$Cancer.Type[mskcc_sup_pd1$Cancer.Type =="Non-Small Cell Lung Cancer"] = "NSCLC"
mskcc_sup_pd1$Cancer.Type[mskcc_sup_pd1$Cancer.Type =="Renal Cell Carcinoma"] = "Renal"
# table(mskcc_sup_pd1$Cancer.Type)
overlap_id= data.frame(read_excel('TMB_and_outcomes_in_patients_treated_with_ICI_valero.xlsx', sheet = 2))
# Removing overlap of samstein et al
ROI=intersect(mskcc_sup_pd1$Sample.ID, overlap_id$IDs.overlapping.with.Samstein.dataset)
mskcc_sup_no_overlap =mskcc_sup_pd1[!(mskcc_sup_pd1$Sample.ID %in% ROI),]
## Loading mskcc_2's et al data
Valero_ICI = data.frame(read_excel("TMB_and_outcomes_in_patients_treated_with_ICI_valero.xlsx", sheet = 1))
# Valero_ICI$Vital.status[Valero_ICI$Vital.status== "Alive"] = 0
# Valero_ICI$Vital.status[Valero_ICI$Vital.status== "Dead"] = 1
Valero_ICI$Vital.status[grep("Alive", Valero_ICI$Vital.status,ignore.case = T)] = 0
Valero_ICI$Vital.status[grep("Dead", Valero_ICI$Vital.status,ignore.case = T)] = 1
Valero_ICI$Vital.status = as.numeric(Valero_ICI$Vital.status)
colnames(Valero_ICI)[colnames(Valero_ICI) %in% c("TMB..Mutations.Mb.",
"Vital.status",
"Overall.Survival..Months.")] <- c("TMB",
"Overall_survival_status",
"Overall_survival_months")
Valero_ICI= Valero_ICI[!is.na(Valero_ICI$Overall_survival_status),] ### removing Na values of survival status
Valero_ICI_pd1= Valero_ICI[grep('PD',Valero_ICI$ICI.drug.class),]
Valero_ICI_pd1$Progression= factor2numeric(factor(Valero_ICI_pd1$Progression, labels =  c('0', '1')))
Valero_ICI_pd1$Cancer.type[Valero_ICI_pd1$Cancer.type=="CNS"] = "Glioma"
## for forest plot to check take the sample size
samples_each_cancer_type=aggregate(ID ~ Cancer.type, Valero_ICI_pd1, length)
samples_each_cancer_type$cancer_acronym= c('BLCA', 'BRCA','COAD', 'UCEC', 'ESCA', 'STAD',
'GBM', 'HNSC', 'LIHC', 'SKCM', 'MESO','NSCLC',
'OV', 'PAAD', 'KIRC', 'SARC', 'SCLC', 'Unknown-Primary')
cancer_Types_of_Interest=samples_each_cancer_type[,3][samples_each_cancer_type[,2]>1]
# Combine the above two datasets
mskcc_combined= rbind(data.frame(ID= mskcc_sup_no_overlap$Sample.ID,
Age= mskcc_sup_no_overlap$Age_decade,
Cancer_Type= mskcc_sup_no_overlap$Cancer.Type,
Sex= mskcc_sup_no_overlap$GENDER,
TMB= mskcc_sup_no_overlap$TMB,
drug= mskcc_sup_no_overlap$Drug_class,## removed MSI information
year_in_ici= mskcc_sup_no_overlap$Imm_yearbin,
Overall_survival_status= mskcc_sup_no_overlap$SURVIVAL_EVENT,
Overall_survival_months= mskcc_sup_no_overlap$SURVIVAL_MONTHS,
PFS_status= NA,
PFS_months= NA,
ORR= NA),
data.frame(ID= Valero_ICI_pd1$ID,
Age= Valero_ICI_pd1$Age.at.ICI.start,
Cancer_Type= Valero_ICI_pd1$Cancer.type,
Sex= Valero_ICI_pd1$Sex,
TMB= Valero_ICI_pd1$TMB,
drug= Valero_ICI_pd1$ICI.drug.class,
year_in_ici= Valero_ICI_pd1$Year.of.ICI.treatment.start,
Overall_survival_status= Valero_ICI_pd1$Overall_survival_status,
Overall_survival_months= Valero_ICI_pd1$Overall_survival_months,
PFS_status= factor2numeric(factor(Valero_ICI_pd1$Progression, labels =  c('0', '1'))),
PFS_months= Valero_ICI_pd1$Progression.Free.Survival..Months.,
ORR= Valero_ICI_pd1$Response.to.ICI)
)
mskcc_combined$Cancer_Type_acronym=NA
mskcc_combined$Cancer_Type=factor(mskcc_combined$Cancer_Type)
mskcc_combined$Cancer_Type_acronym=mskcc_combined$Cancer_Type
levels(mskcc_combined$Cancer_Type_acronym)=c('BLCA', 'BRCA','COAD', 'UCEC', 'ESCA', 'STAD',
'GBM', 'HNSC', 'LIHC', 'SKCM', 'MESO','NSCLC',
'OV', 'PAAD', 'KIRC', 'SARC', 'SCLC', 'Unknown-Primary')
samples_by_cancer_type = aggregate(ID ~ Cancer_Type_acronym,mskcc_combined, length)
cancerTypes_of_Interest = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
table(mskcc_combined$Cancer_Type)
# Calculates TMB and Response assocaition
Calculate_TMB_Response_association<-function(infunc_df= mskcc_combined,
COI="NSCLC",
response_measure='ORR'){
infunc_df_tmb= infunc_df[((infunc_df$Cancer_Type_acronym == COI)),]
#infunc_df_tmb= infunc_df[((infunc_df$Cancer_Type == COI)),]
if(response_measure=='ORR'){
infunc_df_tmb=infunc_df_tmb[!is.na(infunc_df_tmb$ORR),]
# Contigency matrix
cont_matrix=table( infunc_df_tmb$TMB>=10, infunc_df_tmb$ORR)
# Perform fisher test
fisher_test_results_raw=fisher.test(cont_matrix)
to_return=c(effect_size=unlist(fisher_test_results_raw$estimate),
P=fisher_test_results_raw$p.value)
} else if(response_measure =='OS') {
infunc_df_tmb= infunc_df_tmb[!is.na(infunc_df_tmb$Overall_survival_months),]
# Perform coxph test
coxph_model <- coxph(Surv(time = Overall_survival_months,
event = Overall_survival_status) ~ (TMB >= 10) ,
data = infunc_df_tmb)
to_return=c(effect_size=summary(coxph_model)$coefficients[1,c(2)],
P=summary(coxph_model)$coefficients[1,c(5)])
}  else if(response_measure=='PFS') {
infunc_df_tmb= infunc_df_tmb[!is.na(infunc_df_tmb$PFS_months),]
coxph_model <- coxph(Surv(time = PFS_months,
event = PFS_status) ~ (TMB>=10) ,
data = infunc_df_tmb)
to_return=c(effect_size=summary(coxph_model)$coefficients[1,c(2)],
P=summary(coxph_model)$coefficients[1,c(5)])
}
names(to_return)=c('effect_size', 'P')
to_return
}
# Given a set of cancer types & Immuen matrix
# Tmb_Resp_Association - Or TRA
create_corr_with_Immune_factors<- function(infunc_cancer_types=allcancer_types,
infunc_immune_matrix=immune_factor,
infun_Tmb_Resp_Association = ORR_difference,
response_type='ORR',
consider_cancer_type='all_cancerTypes',
infunc_title='All cancerTypes'){
infun_Tmb_Resp_Association=infun_Tmb_Resp_Association[
!is.na(infun_Tmb_Resp_Association[,1]) & is.finite(infun_Tmb_Resp_Association[,1]),]
infunc_cancer_types_filtered=intersect(rownames(infun_Tmb_Resp_Association),
infunc_cancer_types)
## filter to remove features with high number of zeroes
infunc_immune_matrix_filtered= infunc_immune_matrix[,!colSums(infunc_immune_matrix!= 0) <= 8]
## Correlation
filtered_features_resp = infunc_immune_matrix_filtered[na.omit(match(infunc_cancer_types_filtered,
rownames(infunc_immune_matrix_filtered))),]
target_resp= infun_Tmb_Resp_Association[rownames(filtered_features_resp),'effect_size']
# cor.test(features_resp[,2],target_resp)
correlation_matrix= data.frame(t(apply(filtered_features_resp, 2, function(x)
unlist(cor.test(x, target_resp, method = 's')[c(3, 4)])) ))
correlation_matrix=na.omit(correlation_matrix[order(correlation_matrix[,2],decreasing = T),])
correlation_matrix$immune_factors=gsub('\\.',' ',gsub('\\.\\.',' ',rownames(correlation_matrix)))
Panel2 <- ggplot(data=correlation_matrix, aes(x=reorder(immune_factors, estimate.rho),
y=estimate.rho
# , color= p.value <0.05
))+
geom_bar(aes(fill= estimate.rho),stat="identity")+
scale_fill_gradient2(low = "red",mid = "dark grey",high = "dark green")+
coord_flip() + # horizontal bars
geom_text(aes(y = 0, label = immune_factors, hjust = as.numeric(estimate.rho > 0))) +  # label text based on value
theme_bw(base_size = 18)+
theme(axis.text.y = element_blank(), legend.position="top",
plot.title = element_text(color="red", size=14, face="bold.italic"))+
labs(x='Immune Factors', y=paste('Spearman correlation with Power of TMB \n(using ',response_type,')',sep='' ))+
ggtitle(infunc_title)
ggsave(paste('/Users/neelamf2/Documents/GitHub/Immune_determinant_for_power_of_TMB/Result_fgures/tmb-responseVSTME_factors',
consider_cancer_type,'_',
response_type,'.pdf', sep ='' ),
Panel2, height=7, width = 6, units = 'in', dpi = 500)
list(correlation_matrix, Panel2)
}
create_scatter_plot<- function(infunc_cancer_types=allcancer_types,
infunc_immune_matrix=immune_factor,
infun_Tmb_Resp_Association = OS_difference,
response_type='OS',
consider_cancer_type='all_cancerTypes',
infunc_title='All cancerTypes',
immune_feature_of_interest= colnames(infunc_immune_matrix)[37]){
df2plot=data.frame(infun_Tmb_Resp_Association[infunc_cancer_types,],
features_resp= infunc_immune_matrix[infunc_cancer_types,immune_feature_of_interest])
df2plot=na.omit(df2plot)
Panel3 <- ggplot(df2plot, aes(x=rank(effect_size), y=rank(features_resp), size= -log(P, 10) )) +
stat_smooth(method='lm')+
geom_point()+
theme_bw(base_size = 15)+
# theme(legend.position = 'none')+
labs(x='Power of TMB (rank)',
y=paste(gsub('\\.',' ',immune_feature_of_interest),  '(rank)'), size='-log10(P)')+
stat_cor(label.y = 0, label.x = 5, method = 'p', cor.coef.name = 'rho', size=5)+
geom_label_repel(aes(label=rownames(df2plot), size=0.5), show.legend = F)+
coord_flip()
ggsave(paste('/Users/neelamf2/Documents/GitHub/Immune_determinant_for_power_of_TMB/Result_fgures/tmb-responseVS',
immune_feature_of_interest,
consider_cancer_type,'_',
response_type,'.pdf', sep ='' ),
Panel3, height=5, width = 5, units = 'in', dpi = 500)
# list(correlation_matrix, Panel3)
}
library(forestplot)
Calculate_TMB_Response_association_with_CI<-function(infunc_df= mskcc_combined,
COI="NSCLC",
response_measure='ORR'){
infunc_df_tmb= infunc_df[((infunc_df$Cancer_Type_acronym == COI)),]
#infunc_df_tmb= infunc_df[((infunc_df$Cancer_Type == COI)),]
if(response_measure=='ORR'){
infunc_df_tmb=infunc_df_tmb[!is.na(infunc_df_tmb$ORR),]
# Contigency matrix
cont_matrix=table( infunc_df_tmb$TMB>=10, infunc_df_tmb$ORR)
# Perform fisher test
fisher_test_results_raw=fisher.test(cont_matrix)
to_return=c(effect_size=unlist(fisher_test_results_raw$estimate),
P=fisher_test_results_raw$p.value,
lower_ci=fisher_test_results_raw$conf.int[1],
upper_ci=fisher_test_results_raw$conf.int[2])
} else if(response_measure =='OS') {
infunc_df_tmb= infunc_df_tmb[!is.na(infunc_df_tmb$Overall_survival_months),]
# Perform coxph test
coxph_model <- coxph(Surv(time = Overall_survival_months,
event = Overall_survival_status) ~ (TMB >= 10) ,
data = infunc_df_tmb)
to_return=c(effect_size=summary(coxph_model)$coefficients[1,c(2)],
P=summary(coxph_model)$coefficients[1,c(5)],
lower_ci= summary(coxph_model)$conf.int[1,c(3)],
upper_ci= summary(coxph_model)$conf.int[1,c(4)])
}  else if(response_measure=='PFS') {
infunc_df_tmb= infunc_df_tmb[!is.na(infunc_df_tmb$PFS_months),]
coxph_model <- coxph(Surv(time = PFS_months,
event = PFS_status) ~ (TMB>=10) ,
data = infunc_df_tmb)
to_return=c(effect_size=summary(coxph_model)$coefficients[1,c(2)],
P=summary(coxph_model)$coefficients[1,c(5)],
lower_ci= summary(coxph_model)$conf.int[1,c(3)],
upper_ci= summary(coxph_model)$conf.int[1,c(4)])
}
names(to_return)=c('effect_size', 'P', 'lower_ci', 'upper_ci')
to_return
}
all_cancertype = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
Figure_1A_plot_df= OS_cox_results
allcancer_types=levels(mskcc_combined$Cancer_Type_acronym)
OS_cox_results= do.call(rbind, lapply(allcancer_types, function(x)
err_handle(Calculate_TMB_Response_association_with_CI(infunc_df= mskcc_combined,
COI=x,
response_measure='OS'))))
OS_cox_results<- data.frame(OS_cox_results)
rownames(OS_cox_results)=allcancer_types
## PFS
allcancer_types=levels(mskcc_combined$Cancer_Type_acronym)
PFS_cox_results= do.call(rbind, lapply(allcancer_types, function(x)
err_handle(Calculate_TMB_Response_association_with_CI(infunc_df= mskcc_combined,
COI=x,
response_measure='PFS'))))
PFS_cox_results<- data.frame(PFS_cox_results)
rownames(PFS_cox_results)=allcancer_types
## ORR
ORR_cox_results= do.call(rbind, lapply(allcancer_types, function(x)
err_handle(Calculate_TMB_Response_association_with_CI(infunc_df= mskcc_combined,
COI=x,
response_measure='ORR'))))
ORR_cox_results<- data.frame(ORR_cox_results)
rownames(ORR_cox_results)=allcancer_types
all_cancertype = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
Figure_1A_plot_df= OS_cox_results
Figure_1A_plot_df= Figure_1A_plot_df[all_cancertype,]
Figure_1A_plot_df= na.omit(Figure_1A_plot_df)
Figure_1A_plot_df=Figure_1A_plot_df[ order(Figure_1A_plot_df$effect_size, decreasing = F),]
Figure_1A_plot_df= Figure_1A_plot_df[!(rownames(Figure_1A_plot_df)%in% c('SCLC',
"STAD",
'KIRC',
# 'PAAD',
"Unknown-Primary")),]
colnames(Figure_1A_plot_df)[2] = "pval"
### number of Samples
no_of_samples_os= samples_by_cancer_type[samples_by_cancer_type[,2]> 1,]
no_of_samples_os = no_of_samples_os[match(rownames(Figure_1A_plot_df),no_of_samples_os$Cancer_Type),]
### plot ###
tabletext_OS=cbind(c("Cancer Type",
rownames(Figure_1A_plot_df)),
c("# Samples",
no_of_samples_os$ID),
c("pval",
round(Figure_1A_plot_df$pval/2, 5)))
## data
HR_OS=(Figure_1A_plot_df)
### styles for color according to pval
styles_OS <- fpShapesGp(
lines = list(gpar(col ="blue"),
gpar(col = ifelse((HR_OS$pval/2)[1] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[2] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[3] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[4] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[5] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[6] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[7] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[8] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[9] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[10] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[11] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[12] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[13] <0.05, "blue", "red"))
# ,gpar(col = ifelse((HR_OS$pval/2)[14] <0.05, "blue", "red"))
),
box = list(gpar(fill = "blue"),
gpar(fill = ifelse((HR_OS$pval/2)[1] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[2] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[3] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[4] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[5] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[6] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[7] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[8] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[9] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[10] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[11] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[12] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[13] <0.05, "blue", "red"))
)
)
pdf('/Users/neelamf2/Desktop/panel_1_A.pdf', width = 10)
forestplot(tabletext_OS,
boxsize = .30, # We set the box size to better visualize the type
line.margin = .30, # We need to add this to avoid crowding
mean = c(NA,
log(HR_OS$effect_size,10)),
lower =c(NA,
log(HR_OS$lower_ci, 10)),
upper = c(NA,
log(HR_OS$upper_ci,10)),
clip=c(-1,1),
lty.ci = c(1),
ci.vertices = TRUE,
graph.pos=3, # position of the box plot
graphwidth = unit(12,"cm"),
colgap = unit(1.2,"mm"),
col=fpColors(box= styles_OS$box[1]),
xlab="Log(10) HR",
ylab= "Cancer Types",
shapes_gp= styles_OS,
txt_gp = fpTxtGp(label = list(gpar(fontface = 1,cex= 1.5),
gpar(fontface = 1, cex= 1.5),
gpar(fontface = 1,cex=1.5)),
ticks=gpar(cex=1.25),
xlab = gpar(cex=1.25),
title = gpar(fontface = 2,cex= 1.48)),
grid = structure(c(-1), gp = gpar(lty = 1, col = "black")),
title = 'Power of TMB of OS between TMB high(>= 10 mut/MB) and TMB low ')
dev.off()
cancertype = samples_each_cancer_type[,3][samples_each_cancer_type[,2]> 1]
ORR_cox_results
Figure_1B_plot_df= ORR_cox_results[rownames(ORR_cox_results) %in% cancertype,]
Figure_1B_plot_df= Figure_1B_plot_df[!is.na(Figure_1B_plot_df$effect_size) &
is.finite(Figure_1B_plot_df$effect_size),]
Figure_1B_plot_df= Figure_1B_plot_df[!(rownames(Figure_1B_plot_df) %in% c("STAD",
'PAAD',
"Unknown-Primary")),]
Figure_1B_plot_df=Figure_1B_plot_df[order(Figure_1B_plot_df$effect_size,
decreasing = F),]
no_of_samples= samples_each_cancer_type[samples_by_cancer_type$ID >1,]
no_of_samples= no_of_samples[match(rownames(Figure_1B_plot_df),no_of_samples$cancer_acronym),]
colnames(Figure_1B_plot_df)[2]= "pval"
### plot ###
tabletext_ORR= cbind(c("Cancer Type",
rownames(Figure_1B_plot_df)),
c("# patient",
no_of_samples$ID),
c("pval",
round(Figure_1B_plot_df$pval/2, 5)))
HR_ORR=Figure_1B_plot_df
styles <- fpShapesGp(
lines = list(gpar(col = ifelse((HR_ORR$pval/2) <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[1] <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[2] <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[3] <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[4] <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[5] <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[6] <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[7] <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[8] <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[9] <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[10] <0.05, "blue", "red"))
# , gpar(col = ifelse((HR_ORR$pval/2)[10] <0.05, "blue", "red"))
),
box = list(gpar(fill = ifelse((HR_ORR$pval/2) <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[1] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[2] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[3] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[4] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[5] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[6] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[7] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[8] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[9] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[10] <0.05, "blue", "red"))
# ,gpar(fill = ifelse((HR_ORR$pval/2)[11] <0.05, "blue", "red"))
)
)
pdf('/Users/neelamf2/Desktop/panel_1_B.pdf',
width = 10)
forestplot(tabletext_ORR,
boxsize = .30, # We set the box size to better visualize the type
line.margin = .30, # We need to add this to avoid crowding
mean = c(NA,
log(HR_ORR$effect_size,10)),
lower =c(NA,
log(HR_ORR$lower_ci,10)),
upper = c(NA,
log(HR_ORR$upper_ci,10)),
clip=c(-1,5),
lty.ci = c(1),
ci.vertices = TRUE,
graph.pos=3, # position of the box plot
graphwidth = unit(12,"cm"),
colgap = unit(1.2,"mm"),
col=fpColors(box= styles$box[1]),
xlab="Log (10) Odd Ratio",
ylab= "Cancer Types",
shapes_gp = styles,
txt_gp = fpTxtGp(label = list(gpar(fontface = 1,cex= 1.5),
gpar(fontface = 1, cex= 1.5),
gpar(fontface = 1,cex=1.5)),
ticks=gpar(cex=1.25),
xlab = gpar(cex=1.25),
title = gpar(fontface = 2,cex= 1.48)),
grid = structure(c(-1), gp = gpar(lty = 1, col = "black")),
title = 'Power of TMB of Recists response between high and low TMB group')
dev.off()
cancertype = samples_each_cancer_type[,3][samples_each_cancer_type[,2]> 1]
Ex_figure_1_plot_df= PFS_cox_results
Ex_figure_1_plot_df= Ex_figure_1_plot_df[rownames(Ex_figure_1_plot_df)
%in% cancertype,]# remove cancer type less than 50
Ex_figure_1_plot_df= na.omit(Ex_figure_1_plot_df)
Ex_figure_1_plot_df= Ex_figure_1_plot_df[!(rownames(Ex_figure_1_plot_df) %in% c('KIRC',
"STAD",
'SCLC',
"Unknown-Primary")),]
Ex_figure_1_plot_df=Ex_figure_1_plot_df[
order(Ex_figure_1_plot_df$effect_size, decreasing = F),]
colnames(Ex_figure_1_plot_df)[2] = "pval"
### number of Samples
no_of_samples_PFS= samples_each_cancer_type[samples_by_cancer_type$ID >1,]
no_of_samples_PFS = no_of_samples_PFS[match(rownames(Ex_figure_1_plot_df),no_of_samples_PFS$cancer_acronym),]
### plot ###
tabletext_PFS= cbind(c("Cancer Type",
rownames(Ex_figure_1_plot_df)),
c("# Samples",
no_of_samples_PFS$ID),
c("pval",
round(Ex_figure_1_plot_df$pval/2, 8)))
## data
HR_PFS=Ex_figure_1_plot_df
### styles for color according to pval
styles_PFS <- fpShapesGp(
lines = list(gpar(col ="Blue"),
gpar(col = ifelse((HR_PFS$pval/2)[1] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[2] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[3] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[4] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[5] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[6] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[7] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[8] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[9] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[10] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[11] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[12] <0.05, "blue", "red"))
),
box = list(gpar(fill = "blue"),
gpar(fill = ifelse((HR_PFS$pval/2)[1] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[2] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[3] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[4] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[5] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[6] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[7] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[8] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[9] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[10] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[11] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[12] <0.05, "blue", "red"))
))
pdf('/Users/neelamf2/Desktop/Extended_panel_1.pdf', width = 10)
forestplot(tabletext_PFS,
boxsize = .30, # We set the box size to better visualize the type
line.margin = .30, # We need to add this to avoid crowding
mean = c(NA,
log(HR_PFS$effect_size,10)),
lower =c(NA,
log(HR_PFS$lower_ci,10)),
upper = c(NA,
log(HR_PFS$upper_ci,10)),
clip=c(-1,1),
lty.ci = c(1),
ci.vertices = TRUE,
graph.pos=3, # position of the box plot
graphwidth = unit(12,"cm"),
colgap = unit(1.2,"mm"),
col=fpColors(box= styles_PFS$box[1]),
xlab="Log (10) Odd Ratio",
ylab= "Cancer Types",
shapes_gp = styles_PFS,
txt_gp = fpTxtGp(label = list(gpar(fontface = 1,cex= 1.5),
gpar(fontface = 1, cex= 1.5),
gpar(fontface = 1,cex=1.5)),
ticks=gpar(cex=1.25),
xlab = gpar(cex=1.25),
title = gpar(fontface = 2,cex= 1.48)),
grid = structure(c(-1), gp = gpar(lty = 1, col = "black")),
title = 'Power of TMB of Recists response between high and low TMB group')
dev.off()
