log(HR_OS$upper_ci,10)),
clip=c(-1,1),
lty.ci = c(1),
ci.vertices = TRUE,
graph.pos=3, # position of the box plot
graphwidth = unit(12,"cm"),
colgap = unit(1.2,"mm"),
col=fpColors(box= styles_OS$box[1]),
xlab="Log(10) HR",
ylab= "Cancer Types",
shapes_gp= styles_OS,
txt_gp = fpTxtGp(label = list(gpar(fontface = 1,cex= 1.5),
gpar(fontface = 1, cex= 1.5),
gpar(fontface = 1,cex=1.5)),
ticks=gpar(cex=1.25),
xlab = gpar(cex=1.25),
title = gpar(fontface = 2,cex= 1.48)),
grid = structure(c(-1), gp = gpar(lty = 1, col = "black")),
title = 'Power of TMB of OS between TMB high(>= 10 mut/MB) and TMB low ')
dev.off()
mskcc_combined= read.csv("../data/mskcc_combined.csv")
mskcc_combined$Cancer_Type_acronym=factor(mskcc_combined$Cancer_Type_acronym)
levels(mskcc_combined$Cancer_Type_acronym)
samples_by_cancer_type = aggregate(ID ~ Cancer_Type_acronym,mskcc_combined, length)
cancerTypes_of_Interest = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
samples_by_cancer_type
aggregate(ID ~ Cancer.type, Valero_ICI_pd1, length)
mskcc_combined$PFS_status
is.na(mskcc_combined$PFS_status)
sum(is.na(mskcc_combined$PFS_status))
sum(is.na(mskcc_combined$ORR))
dim(mskcc_combined[!(is.na(mskcc_combined$PFS_status)),])
mskcc_df_ORR_PFS= mskcc_combined[!(is.na(mskcc_combined$PFS_status)),]
aggregate(ID ~ Cancer_Type_acronym,mskcc_df_ORR_PFS, length)
aggregate(ID ~ Cancer_Type,mskcc_df_ORR_PFS, length)
## removing cancer types where PFS/ ORR is NA for figure 1B and ex figure 1
mskcc_df_ORR_PFS= mskcc_combined[!(is.na(mskcc_combined$PFS_status)),]
samples_each_cancer_type = aggregate(ID ~ Cancer_Type_acronym,mskcc_df_ORR_PFS, length)
samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
samples_each_cancer_type
## removing cancer types where PFS/ ORR is NA for figure 1B and ex figure 1
mskcc_df_ORR_PFS= mskcc_combined[!(is.na(mskcc_combined$PFS_status)),]
samples_each_cancer_type = aggregate(ID ~ Cancer_Type_acronym,mskcc_df_ORR_PFS, length)
cancerTypes_of_Interest = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
mskcc_combined= read.csv("../data/mskcc_combined.csv")
mskcc_combined$Cancer_Type_acronym=factor(mskcc_combined$Cancer_Type_acronym)
levels(mskcc_combined$Cancer_Type_acronym)
samples_by_cancer_type = aggregate(ID ~ Cancer_Type_acronym,mskcc_combined, length)
cancerTypes_of_Interest = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
## removing cancer types where PFS/ ORR is NA for figure 1B and ex figure 1
mskcc_df_ORR_PFS= mskcc_combined[!(is.na(mskcc_combined$PFS_status)),]
samples_each_cancer_type = aggregate(ID ~ Cancer_Type_acronym,mskcc_df_ORR_PFS, length)
cancerTypes_of_Interest = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
mskcc_combined= read.csv("../data/mskcc_combined.csv")
mskcc_combined$Cancer_Type_acronym=factor(mskcc_combined$Cancer_Type_acronym)
samples_by_cancer_type = aggregate(ID ~ Cancer_Type_acronym,mskcc_combined, length)
cancerTypes_of_Interest = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
## removing cancer types where PFS/ ORR is NA for figure 1B and ex figure 1
mskcc_df_ORR_PFS= mskcc_combined[!(is.na(mskcc_combined$PFS_status)),]
samples_each_cancer_type = aggregate(ID ~ Cancer_Type_acronym,mskcc_df_ORR_PFS, length)
cancerTypes_of_Interest = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
mskcc_combined= read.csv("../data/mskcc_combined.csv")
mskcc_combined$Cancer_Type_acronym=factor(mskcc_combined$Cancer_Type_acronym)
samples_by_cancer_type = aggregate(ID ~ Cancer_Type_acronym,mskcc_combined, length)
cancerTypes_of_Interest = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
## removing cancer types where PFS/ ORR is NA for figure 1B and ex figure 1
mskcc_df_ORR_PFS= mskcc_combined[!(is.na(mskcc_combined$PFS_status)),]
samples_each_cancer_type = aggregate(ID ~ Cancer_Type_acronym,mskcc_df_ORR_PFS, length)
cancerTypes_of_Interest = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
<!-- Run s0 and s1 to load and preprocess the data and functions required-->
<!-- Function required for figure1-->
```{r}
Calculate_TMB_Response_association_with_CI<-function(infunc_df= mskcc_combined,
COI="NSCLC",
response_measure='ORR'){
infunc_df_tmb= infunc_df[((infunc_df$Cancer_Type_acronym == COI)),]
#infunc_df_tmb= infunc_df[((infunc_df$Cancer_Type == COI)),]
Calculate_TMB_Response_association_with_CI<-function(infunc_df= mskcc_combined,
COI="NSCLC",
response_measure='ORR'){
infunc_df_tmb= infunc_df[((infunc_df$Cancer_Type_acronym == COI)),]
#infunc_df_tmb= infunc_df[((infunc_df$Cancer_Type == COI)),]
if(response_measure=='ORR'){
infunc_df_tmb=infunc_df_tmb[!is.na(infunc_df_tmb$ORR),]
# Contigency matrix
cont_matrix=table( infunc_df_tmb$TMB>=10, infunc_df_tmb$ORR)
# Perform fisher test
fisher_test_results_raw=fisher.test(cont_matrix)
to_return=c(effect_size=unlist(fisher_test_results_raw$estimate),
P=fisher_test_results_raw$p.value,
lower_ci=fisher_test_results_raw$conf.int[1],
upper_ci=fisher_test_results_raw$conf.int[2])
} else if(response_measure =='OS') {
infunc_df_tmb= infunc_df_tmb[!is.na(infunc_df_tmb$Overall_survival_months),]
# Perform coxph test
coxph_model <- coxph(Surv(time = Overall_survival_months,
event = Overall_survival_status) ~ (TMB >= 10) ,
data = infunc_df_tmb)
to_return=c(effect_size=summary(coxph_model)$coefficients[1,c(2)],
P=summary(coxph_model)$coefficients[1,c(5)],
lower_ci= summary(coxph_model)$conf.int[1,c(3)],
upper_ci= summary(coxph_model)$conf.int[1,c(4)])
}  else if(response_measure=='PFS') {
infunc_df_tmb= infunc_df_tmb[!is.na(infunc_df_tmb$PFS_months),]
coxph_model <- coxph(Surv(time = PFS_months,
event = PFS_status) ~ (TMB>=10) ,
data = infunc_df_tmb)
to_return=c(effect_size=summary(coxph_model)$coefficients[1,c(2)],
P=summary(coxph_model)$coefficients[1,c(5)],
lower_ci= summary(coxph_model)$conf.int[1,c(3)],
upper_ci= summary(coxph_model)$conf.int[1,c(4)])
}
names(to_return)=c('effect_size', 'P', 'lower_ci', 'upper_ci')
to_return
}
mskcc_combined= read.csv("../data/mskcc_combined.csv")
mskcc_combined$Cancer_Type_acronym=factor(mskcc_combined$Cancer_Type_acronym)
samples_by_cancer_type = aggregate(ID ~ Cancer_Type_acronym,mskcc_combined, length)
cancerTypes_of_Interest = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
## removing cancer types where PFS/ ORR is NA for figure 1B and ex figure 1
mskcc_df_ORR_PFS= mskcc_combined[!(is.na(mskcc_combined$PFS_status)),]
samples_each_cancer_type = aggregate(ID ~ Cancer_Type_acronym,mskcc_df_ORR_PFS, length)
cancerTypes_of_Interest = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
infunc_df= mskcc_combined
COI="NSCLC"
response_measure='ORR'
infunc_df_tmb= infunc_df[((infunc_df$Cancer_Type_acronym == COI)),]
if(response_measure=='ORR'){
infunc_df_tmb=infunc_df_tmb[!is.na(infunc_df_tmb$ORR),]
# Contigency matrix
cont_matrix=table( infunc_df_tmb$TMB>=10, infunc_df_tmb$ORR)
# Perform fisher test
fisher_test_results_raw=fisher.test(cont_matrix)
to_return=c(effect_size=unlist(fisher_test_results_raw$estimate),
P=fisher_test_results_raw$p.value,
lower_ci=fisher_test_results_raw$conf.int[1],
upper_ci=fisher_test_results_raw$conf.int[2])
} else if(response_measure =='OS') {
infunc_df_tmb= infunc_df_tmb[!is.na(infunc_df_tmb$Overall_survival_months),]
# Perform coxph test
coxph_model <- coxph(Surv(time = Overall_survival_months,
event = Overall_survival_status) ~ (TMB >= 10) ,
data = infunc_df_tmb)
to_return=c(effect_size=summary(coxph_model)$coefficients[1,c(2)],
P=summary(coxph_model)$coefficients[1,c(5)],
lower_ci= summary(coxph_model)$conf.int[1,c(3)],
upper_ci= summary(coxph_model)$conf.int[1,c(4)])
}  else if(response_measure=='PFS') {
infunc_df_tmb= infunc_df_tmb[!is.na(infunc_df_tmb$PFS_months),]
coxph_model <- coxph(Surv(time = PFS_months,
event = PFS_status) ~ (TMB>=10) ,
data = infunc_df_tmb)
to_return=c(effect_size=summary(coxph_model)$coefficients[1,c(2)],
P=summary(coxph_model)$coefficients[1,c(5)],
lower_ci= summary(coxph_model)$conf.int[1,c(3)],
upper_ci= summary(coxph_model)$conf.int[1,c(4)])
}
names(to_return)=c('effect_size', 'P', 'lower_ci', 'upper_ci')
to_return
Calculate_TMB_Response_association_with_CI<-function(infunc_df= mskcc_combined,
COI="NSCLC",
response_measure='ORR'){
infunc_df_tmb= infunc_df[((infunc_df$Cancer_Type_acronym == COI)),]
#infunc_df_tmb= infunc_df[((infunc_df$Cancer_Type == COI)),]
if(response_measure=='ORR'){
infunc_df_tmb=infunc_df_tmb[!is.na(infunc_df_tmb$ORR),]
# Contigency matrix
cont_matrix=table( infunc_df_tmb$TMB>=10, infunc_df_tmb$ORR)
# Perform fisher test
fisher_test_results_raw=fisher.test(cont_matrix)
to_return=c(effect_size=unlist(fisher_test_results_raw$estimate),
P=fisher_test_results_raw$p.value,
lower_ci=fisher_test_results_raw$conf.int[1],
upper_ci=fisher_test_results_raw$conf.int[2])
} else if(response_measure =='OS') {
infunc_df_tmb= infunc_df_tmb[!is.na(infunc_df_tmb$Overall_survival_months),]
# Perform coxph test
coxph_model <- coxph(Surv(time = Overall_survival_months,
event = Overall_survival_status) ~ (TMB >= 10) ,
data = infunc_df_tmb)
to_return=c(effect_size=summary(coxph_model)$coefficients[1,c(2)],
P=summary(coxph_model)$coefficients[1,c(5)],
lower_ci= summary(coxph_model)$conf.int[1,c(3)],
upper_ci= summary(coxph_model)$conf.int[1,c(4)])
}  else if(response_measure=='PFS') {
infunc_df_tmb= infunc_df_tmb[!is.na(infunc_df_tmb$PFS_months),]
coxph_model <- coxph(Surv(time = PFS_months,
event = PFS_status) ~ (TMB>=10) ,
data = infunc_df_tmb)
to_return=c(effect_size=summary(coxph_model)$coefficients[1,c(2)],
P=summary(coxph_model)$coefficients[1,c(5)],
lower_ci= summary(coxph_model)$conf.int[1,c(3)],
upper_ci= summary(coxph_model)$conf.int[1,c(4)])
}
names(to_return)=c('effect_size', 'P', 'lower_ci', 'upper_ci')
to_return
}
allcancer_types=levels(mskcc_combined$Cancer_Type_acronym)
OS_cox_results= do.call(rbind, lapply(allcancer_types, function(x)
err_handle(Calculate_TMB_Response_association_with_CI(infunc_df= mskcc_combined,
COI=x,
response_measure='OS'))))
OS_cox_results<- data.frame(OS_cox_results)
rownames(OS_cox_results)=allcancer_types
## PFS
allcancer_types=levels(mskcc_combined$Cancer_Type_acronym)
PFS_cox_results= do.call(rbind, lapply(allcancer_types, function(x)
err_handle(Calculate_TMB_Response_association_with_CI(infunc_df= mskcc_combined,
COI=x,
response_measure='PFS'))))
PFS_cox_results<- data.frame(PFS_cox_results)
rownames(PFS_cox_results)=allcancer_types
## ORR
ORR_cox_results= do.call(rbind, lapply(allcancer_types, function(x)
err_handle(Calculate_TMB_Response_association_with_CI(infunc_df= mskcc_combined,
COI=x,
response_measure='ORR'))))
ORR_cox_results<- data.frame(ORR_cox_results)
rownames(ORR_cox_results)=allcancer_types
all_cancertype = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
Figure_1A_plot_df= OS_cox_results
Figure_1A_plot_df= Figure_1A_plot_df[all_cancertype,]
Figure_1A_plot_df= na.omit(Figure_1A_plot_df)
Figure_1A_plot_df=Figure_1A_plot_df[ order(Figure_1A_plot_df$effect_size, decreasing = F),]
Figure_1A_plot_df= Figure_1A_plot_df[!(rownames(Figure_1A_plot_df)%in% c('KIRC'
#,'PAAD'
)),]
colnames(Figure_1A_plot_df)[2] = "pval"
### number of Samples
no_of_samples_os= samples_by_cancer_type[samples_by_cancer_type[,2]> 1,]
no_of_samples_os = no_of_samples_os[match(rownames(Figure_1A_plot_df),no_of_samples_os$Cancer_Type),]
### plot ###
tabletext_OS=cbind(c("Cancer Type",
rownames(Figure_1A_plot_df)),
c("# Samples",
no_of_samples_os$ID),
c("pval",
round(Figure_1A_plot_df$pval/2, 5)))
## data
HR_OS=(Figure_1A_plot_df)
### styles for color according to pval
styles_OS <- fpShapesGp(
lines = list(gpar(col ="blue"),
gpar(col = ifelse((HR_OS$pval/2)[1] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[2] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[3] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[4] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[5] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[6] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[7] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[8] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[9] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[10] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[11] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[12] <0.05, "blue", "red")),
gpar(col = ifelse((HR_OS$pval/2)[13] <0.05, "blue", "red"))
# ,gpar(col = ifelse((HR_OS$pval/2)[14] <0.05, "blue", "red"))
),
box = list(gpar(fill = "blue"),
gpar(fill = ifelse((HR_OS$pval/2)[1] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[2] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[3] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[4] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[5] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[6] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[7] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[8] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[9] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[10] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[11] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[12] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_OS$pval/2)[13] <0.05, "blue", "red"))
)
)
pdf('../Result_fgures/panel_1_A.pdf', width = 10)
forestplot(tabletext_OS,
boxsize = .30, # We set the box size to better visualize the type
line.margin = .30, # We need to add this to avoid crowding
mean = c(NA,
log(HR_OS$effect_size,10)),
lower =c(NA,
log(HR_OS$lower_ci, 10)),
upper = c(NA,
log(HR_OS$upper_ci,10)),
clip=c(-1,1),
lty.ci = c(1),
ci.vertices = TRUE,
graph.pos=3, # position of the box plot
graphwidth = unit(12,"cm"),
colgap = unit(1.2,"mm"),
col=fpColors(box= styles_OS$box[1]),
xlab="Log(10) HR",
ylab= "Cancer Types",
shapes_gp= styles_OS,
txt_gp = fpTxtGp(label = list(gpar(fontface = 1,cex= 1.5),
gpar(fontface = 1, cex= 1.5),
gpar(fontface = 1,cex=1.5)),
ticks=gpar(cex=1.25),
xlab = gpar(cex=1.25),
title = gpar(fontface = 2,cex= 1.48)),
grid = structure(c(-1), gp = gpar(lty = 1, col = "black")),
title = 'Power of TMB of OS between TMB high(>= 10 mut/MB) and TMB low ')
dev.off()
cancertype = samples_each_cancer_type[,3][samples_each_cancer_type[,2]> 1]
cancertype = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
ORR_cox_results
Figure_1B_plot_df= ORR_cox_results[rownames(ORR_cox_results) %in% cancertype,]
Figure_1B_plot_df= Figure_1B_plot_df[!is.na(Figure_1B_plot_df$effect_size) &
is.finite(Figure_1B_plot_df$effect_size),]
Figure_1B_plot_df= Figure_1B_plot_df[!(rownames(Figure_1B_plot_df) %in% c("STAD",
'PAAD',
"Unknown-Primary")),]
Figure_1B_plot_df=Figure_1B_plot_df[order(Figure_1B_plot_df$effect_size,
decreasing = F),]
no_of_samples= samples_each_cancer_type[samples_by_cancer_type$ID >1,]
no_of_samples= no_of_samples[match(rownames(Figure_1B_plot_df),no_of_samples$cancer_acronym),]
colnames(Figure_1B_plot_df)[2]= "pval"
### plot ###
tabletext_ORR= cbind(c("Cancer Type",
rownames(Figure_1B_plot_df)),
c("# patient",
no_of_samples$ID),
c("pval",
round(Figure_1B_plot_df$pval/2, 5)))
HR_ORR=Figure_1B_plot_df
styles <- fpShapesGp(
lines = list(gpar(col = ifelse((HR_ORR$pval/2) <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[1] <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[2] <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[3] <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[4] <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[5] <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[6] <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[7] <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[8] <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[9] <0.05, "blue", "red")),
gpar(col = ifelse((HR_ORR$pval/2)[10] <0.05, "blue", "red"))
# , gpar(col = ifelse((HR_ORR$pval/2)[10] <0.05, "blue", "red"))
),
box = list(gpar(fill = ifelse((HR_ORR$pval/2) <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[1] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[2] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[3] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[4] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[5] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[6] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[7] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[8] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[9] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_ORR$pval/2)[10] <0.05, "blue", "red"))
# ,gpar(fill = ifelse((HR_ORR$pval/2)[11] <0.05, "blue", "red"))
)
)
pdf('../Result_fgures/panel_1_B.pdf',
width = 10)
forestplot(tabletext_ORR,
boxsize = .30, # We set the box size to better visualize the type
line.margin = .30, # We need to add this to avoid crowding
mean = c(NA,
log(HR_ORR$effect_size,10)),
lower =c(NA,
log(HR_ORR$lower_ci,10)),
upper = c(NA,
log(HR_ORR$upper_ci,10)),
clip=c(-1,5),
lty.ci = c(1),
ci.vertices = TRUE,
graph.pos=3, # position of the box plot
graphwidth = unit(12,"cm"),
colgap = unit(1.2,"mm"),
col=fpColors(box= styles$box[1]),
xlab="Log (10) Odd Ratio",
ylab= "Cancer Types",
shapes_gp = styles,
txt_gp = fpTxtGp(label = list(gpar(fontface = 1,cex= 1.5),
gpar(fontface = 1, cex= 1.5),
gpar(fontface = 1,cex=1.5)),
ticks=gpar(cex=1.25),
xlab = gpar(cex=1.25),
title = gpar(fontface = 2,cex= 1.48)),
grid = structure(c(-1), gp = gpar(lty = 1, col = "black")),
title = 'Power of TMB of Recists response between high and low TMB group')
dev.off()
cancertype = samples_each_cancer_type[,1][samples_each_cancer_type[,2]> 1]
Ex_figure_1_plot_df= PFS_cox_results
Ex_figure_1_plot_df= Ex_figure_1_plot_df[rownames(Ex_figure_1_plot_df)
%in% cancertype,]# remove cancer type less than 50
Ex_figure_1_plot_df= na.omit(Ex_figure_1_plot_df)
Ex_figure_1_plot_df= Ex_figure_1_plot_df[!(rownames(Ex_figure_1_plot_df) %in% c('KIRC',
"STAD",
'SCLC',
"Unknown-Primary")),]
Ex_figure_1_plot_df=Ex_figure_1_plot_df[
order(Ex_figure_1_plot_df$effect_size, decreasing = F),]
colnames(Ex_figure_1_plot_df)[2] = "pval"
### number of Samples
no_of_samples_PFS= samples_each_cancer_type[samples_by_cancer_type$ID >1,]
no_of_samples_PFS = no_of_samples_PFS[match(rownames(Ex_figure_1_plot_df),no_of_samples_PFS$cancer_acronym),]
### plot ###
tabletext_PFS= cbind(c("Cancer Type",
rownames(Ex_figure_1_plot_df)),
c("# Samples",
no_of_samples_PFS$ID),
c("pval",
round(Ex_figure_1_plot_df$pval/2, 8)))
## data
HR_PFS=Ex_figure_1_plot_df
### styles for color according to pval
styles_PFS <- fpShapesGp(
lines = list(gpar(col ="Blue"),
gpar(col = ifelse((HR_PFS$pval/2)[1] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[2] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[3] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[4] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[5] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[6] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[7] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[8] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[9] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[10] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[11] <0.05, "blue", "red")),
gpar(col = ifelse((HR_PFS$pval/2)[12] <0.05, "blue", "red"))
),
box = list(gpar(fill = "blue"),
gpar(fill = ifelse((HR_PFS$pval/2)[1] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[2] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[3] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[4] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[5] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[6] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[7] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[8] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[9] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[10] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[11] <0.05, "blue", "red")),
gpar(fill = ifelse((HR_PFS$pval/2)[12] <0.05, "blue", "red"))
))
pdf('../Result_fgures/Extended_panel_1.pdf', width = 10)
forestplot(tabletext_PFS,
boxsize = .30, # We set the box size to better visualize the type
line.margin = .30, # We need to add this to avoid crowding
mean = c(NA,
log(HR_PFS$effect_size,10)),
lower =c(NA,
log(HR_PFS$lower_ci,10)),
upper = c(NA,
log(HR_PFS$upper_ci,10)),
clip=c(-1,1),
lty.ci = c(1),
ci.vertices = TRUE,
graph.pos=3, # position of the box plot
graphwidth = unit(12,"cm"),
colgap = unit(1.2,"mm"),
col=fpColors(box= styles_PFS$box[1]),
xlab="Log (10) Odd Ratio",
ylab= "Cancer Types",
shapes_gp = styles_PFS,
txt_gp = fpTxtGp(label = list(gpar(fontface = 1,cex= 1.5),
gpar(fontface = 1, cex= 1.5),
gpar(fontface = 1,cex=1.5)),
ticks=gpar(cex=1.25),
xlab = gpar(cex=1.25),
title = gpar(fontface = 2,cex= 1.48)),
grid = structure(c(-1), gp = gpar(lty = 1, col = "black")),
title = 'Power of TMB of Recists response between high and low TMB group')
dev.off()
mskcc_combined= read.csv("../data/mskcc_combined.csv")
mskcc_combined$Cancer_Type_acronym=factor(mskcc_combined$Cancer_Type_acronym)
samples_by_cancer_type = aggregate(ID ~ Cancer_Type_acronym,mskcc_combined, length)
cancerTypes_of_Interest = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
## removing cancer types where PFS/ ORR is NA for figure 1B and ex figure 1
mskcc_df_ORR_PFS= mskcc_combined[!(is.na(mskcc_combined$PFS_status)),]
samples_each_cancer_type = aggregate(ID ~ Cancer_Type_acronym,mskcc_df_ORR_PFS, length)
cancerTypes_of_Interest = samples_by_cancer_type[,1][samples_by_cancer_type[,2]> 1]
Calculate_TMB_Response_association_with_CI<-function(infunc_df= mskcc_combined,
COI="NSCLC",
response_measure='ORR'){
infunc_df_tmb= infunc_df[((infunc_df$Cancer_Type_acronym == COI)),]
#infunc_df_tmb= infunc_df[((infunc_df$Cancer_Type == COI)),]
if(response_measure=='ORR'){
infunc_df_tmb=infunc_df_tmb[!is.na(infunc_df_tmb$ORR),]
# Contigency matrix
cont_matrix=table( infunc_df_tmb$TMB>=10, infunc_df_tmb$ORR)
# Perform fisher test
fisher_test_results_raw=fisher.test(cont_matrix)
to_return=c(effect_size=unlist(fisher_test_results_raw$estimate),
P=fisher_test_results_raw$p.value,
lower_ci=fisher_test_results_raw$conf.int[1],
upper_ci=fisher_test_results_raw$conf.int[2])
} else if(response_measure =='OS') {
infunc_df_tmb= infunc_df_tmb[!is.na(infunc_df_tmb$Overall_survival_months),]
# Perform coxph test
coxph_model <- coxph(Surv(time = Overall_survival_months,
event = Overall_survival_status) ~ (TMB >= 10) ,
data = infunc_df_tmb)
to_return=c(effect_size=summary(coxph_model)$coefficients[1,c(2)],
P=summary(coxph_model)$coefficients[1,c(5)],
lower_ci= summary(coxph_model)$conf.int[1,c(3)],
upper_ci= summary(coxph_model)$conf.int[1,c(4)])
}  else if(response_measure=='PFS') {
infunc_df_tmb= infunc_df_tmb[!is.na(infunc_df_tmb$PFS_months),]
coxph_model <- coxph(Surv(time = PFS_months,
event = PFS_status) ~ (TMB>=10) ,
data = infunc_df_tmb)
to_return=c(effect_size=summary(coxph_model)$coefficients[1,c(2)],
P=summary(coxph_model)$coefficients[1,c(5)],
lower_ci= summary(coxph_model)$conf.int[1,c(3)],
upper_ci= summary(coxph_model)$conf.int[1,c(4)])
}
names(to_return)=c('effect_size', 'P', 'lower_ci', 'upper_ci')
to_return
}
